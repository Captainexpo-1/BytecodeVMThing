if __name__ == "__main__":
    constants = [
        Value(0, ValueType.INT),  # Constant 0 (0.0)
        Value(1, ValueType.INT),  # Constant 1 (1.0)
        Value(10, ValueType.INT),  # Constant 2 (the input)
        Value(6, ValueType.INT),  # Constant 3 (6.0)
    ]
    
    functions = [
        Function(
            arg_types=[],  # No arguments
            return_type=ValueType.NONE,  # Returns a float
            code = [
                Instruction(OpCode.LoadConst, 2),  # Load constant 0 (5.0)
                Instruction(OpCode.Call, 1),  # Call factorial(5.0)
                Instruction(OpCode.Halt)  # Halt the program
            ]
        ),
        # Factorial function
        Function(
            arg_types=[ValueType.INT],  # Takes one argument (n)
            return_type=ValueType.INT,  # Returns a float
            code=[
                Instruction(OpCode.LoadVar, 0),  # Load n
                Instruction(OpCode.LoadConst, 0),  # Load constant 0
                Instruction(OpCode.Eq, 0),  # If n == 0, jump to recursion
                Instruction(OpCode.Jif, 11),  # If n == 0, jump to recursion

                Instruction(OpCode.LoadVar, 0),  # Load n
                Instruction(OpCode.LoadConst, 1),  # Load constant 1
                Instruction(OpCode.Sub, 0),  # n - 1
                Instruction(OpCode.Call, 1),  # Call factorial(n - 1)
                Instruction(OpCode.LoadVar, 0),  # Load n
                Instruction(OpCode.Mul, 0),  # n * factorial(n - 1)
                Instruction(OpCode.Ret, 0),  # Return the result
                
                Instruction(OpCode.LoadConst, 1),  # Load constant 1
                Instruction(OpCode.Ret, 0),  # Return 1
            ]
        )
    ]
    genByteCode(constants, functions)