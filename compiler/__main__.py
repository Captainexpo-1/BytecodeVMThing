# Example usage
import argparse
import sys
from compiler.lexer.lexer import Lexer
from compiler.parser.parser import Parser
from compiler.codegen.codegen import CodeGenerator

from compiler.bytecodegen import genByteCode

def display_error(error, source_lines):
    line_num = error.token.line
    col_num = error.token.column
    token_val = error.token.value
    token_len = max(len(token_val), 1)

    line_text = source_lines[line_num - 1].replace('\t', '    ')  # Convert tabs to spaces

    # Account for tabs in spacing
    pointer_line = ' ' * (col_num - 1) + '^' * token_len

    print(line_text)
    print(pointer_line)
    print(f"Error at line {line_num}, column {col_num}: {error.message}")


def parse_source(source_code: str):
    lexer = Lexer(source_code)
    tokens = lexer.tokenize()
    parser = Parser(tokens)
    ast = parser.parse()
    
    source_lines = source_code.splitlines()
    
    # Check for errors
    if parser.errors:
        for error in parser.errors:
            display_error(error, source_lines)
        print("Parsing failed due to errors.")
        return None
    
    return ast

def main():
    parser = argparse.ArgumentParser(description='VM Language Compiler')
    parser.add_argument('file', nargs='?', type=str, help='Source file to compile')
    parser.add_argument('-o', '--output', type=str, help='Output file for bytecode')
    parser.add_argument('--ast', action='store_true', help='Print the AST')
    parser.add_argument('--bytecode', action='store_true', help='Print the bytecode')
    
    args = parser.parse_args()
    
    # Use the example code if no file is provided
    if args.file:
        try:
            with open(args.file, 'r') as f:
                source_code = f.read()
        except FileNotFoundError:
            print(f"Error: File '{args.file}' not found")
            return 1
        except Exception as e:
            print(f"Error reading file: {e}")
            return 1
    else:
        source_code = """extern print(...) -> none;
extern strConcat(string, string) -> string;
extern input() -> string;
extern intFromStr(string) -> int;

// Main function - entry point of the program
fn main() -> none
    print("Hello %s", "this is a test\\n");
    return null;                                // End program execution
end"""
    
    ast = parse_source(source_code)
    
    if not ast:
        print("Parsing failed due to errors.")
        return 1
    
    # Print the AST structure if requested
    if args.ast:
        from pprint import pprint
        print("Abstract Syntax Tree:")
        pprint(ast, compact=True)
    
    # Generate bytecode
    codegen = CodeGenerator(ast)
    bytecode = codegen.generate_code()
    
    if args.bytecode:
        print("Constants:")
        print(codegen.constants)
        print("Generated bytecode:")
        print(bytecode)
    
    
    # Write bytecode to output file if specified
    if args.output:
        try:
            genByteCode(bytecode[1], bytecode[0], args.output)
            print(f"Bytecode written to {args.output}")
        except Exception as e:
            print(f"Error writing to output file: {e}")
            return 1
    
    return 0

# Entry point of the program
if __name__ == "__main__":
    sys.exit(main())